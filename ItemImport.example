using System.Collections.Generic;
using HouseCS.Items;
using HouseCS.Items.Clothes;
using HouseCS.Items.Containers;

namespace HouseCS {
  public class ItemImport {
    public static readonly Bookshelf[] bookshelfs = {
      new Bookshelf(new List<Book>() {
        new Book("The Hobbit", "J.R.R. Tolkien", 1937) //A book in a bookshelf
      })
    };
    public static readonly int[] bookshelfsF = { 1 }; //the bookshelf is on floor 1...
    public static readonly int[] bookshelfsH = { 0 }; //...of house 0
    public static readonly Computer[] computers = {
      new Computer("Tandy", "1000", "TL/2", false, "Desktop") //An old computer
    };
    public static readonly int[] computersF = { 1 }; //the PC is on floor 1...
    public static readonly int[] computersH = { 0 }; //...of house 0
    public static readonly GameConsole[] consoles = {
      new GameConsole(0, "Nintendo", "Wii U"), //console 0
      new GameConsole(0, "Microsoft", "Xbox 360"), //console 1
      new GameConsole(1, "Nintendo", "New 3DS XL") //console 2
    };
    public static readonly int[] consolesF = { 1, 1, 1 }; //all of them on floor 1...
    public static readonly int[] consolesH = { 0, 0, 0 }; //...of house 0
    public static readonly Display[] displays = {
      new Display(true, new List<IItem>() { //a 24" monitor...
        computers[0] //...with the old PC attached to it
      }, 24)
    };
    public static readonly int[] displaysF = { 1 }; //on floor 1...
    public static readonly int[] displaysH = { 0 }; //...of house 0
    public static readonly Bed[] beds = {
      new Bed(false, 2) //standard bed
    };
    public static readonly int[] bedsF = { 1 }; //on floor 1...
    public static readonly int[] bedsH = { 0 }; //...of house 0
    public static readonly Container[] containers = {
      new Container(),
      new Container() //2 generic empty containers
    };
    public static readonly int[] containersF = { 0, 0 }; //all on floor 0...
    public static readonly int[] containersH = { 0, 0 }; //...of house 0
    public static readonly Fridge[] fridges = {
      new Fridge(new List<IItem>() {//fridges with books (ya know, a normal fridge)
        new Book("One", "Two", 3),
        new Book("Four", "Five", 6)
      }, false),
      new Fridge(new List<IItem>() {
        new Book("Seven", "Eight", 9)
      }, false)
    };
    public static readonly int[] fridgesF = { 0, 0 }; //all on floor 0...
    public static readonly int[] fridgesH = { 0, 0 }; //...of house 0
    public static readonly Dresser[] dressers = {
      new Dresser(new List<IItem>() { //clothes dressers
        new Shirt("Red"),
        new Pants("Blue"),
        new Pants("Black")
      }),
      new Dresser(new List<IItem>() {
        new Pants("Black")
      })
    };
    public static readonly int[] dressersF = { 1, 1 }; //floor 1
    public static readonly int[] dressersH = { 0, 0 }; //house 0 (I think we get it by now)
    public static readonly Table[] tables = {
      new Table(new List<IItem>() { //a table full of retro goodness
        new GameConsole(0, "Atari", "VCS 2600"),
        new GameConsole(0, "Nintendo", "NES"),
        new GameConsole(0, "Sega", "Genesis")
      })
    };
    public static readonly int[] tables_f = { 1 }; //floor 1...
    public static readonly int[] tables_h = { 0 }; //house 0...

    //the above doesn't actually matter, because you don't have to do it that way, that's just the weird way I do it

    public static List<House> houses = new List<House>(); //this is required (though it doesn't have to be an empty constructor if you wish)
    public static void InitializeItems() { //this method is required, though it doesn't actually need to do anything if you define all the items in the variable from the start, however I will eventually use this method to add a "reset" functionality
      House myHouse = new House(5, 2);
      House fakeHouse = new House(6, 3);
      houses.Add(myHouse);
      houses.Add(fakeHouse);
      for (int i = 0; i < bookshelfs.Length; i++) houses[bookshelfsH[i]].AddItem(bookshelfsF[i], bookshelfs[i]);
      for (int i = 0; i < computers.Length; i++) houses[computersH[i]].AddItem(computersF[i], computers[i]);
      for (int i = 0; i < consoles.Length; i++) houses[consolesH[i]].AddItem(consolesF[i], consoles[i]);
      for (int i = 0; i < displays.Length; i++) houses[displaysH[i]].AddItem(displaysF[i], displays[i]);
      for (int i = 0; i < beds.Length; i++) houses[bedsH[i]].AddItem(bedsF[i], beds[i]);
      for (int i = 0; i < containers.Length; i++) houses[containersH[i]].AddItem(containersF[i], containers[i]);
      for (int i = 0; i < fridges.Length; i++) houses[fridgesH[i]].AddItem(fridgesF[i], fridges[i]);
      for (int i = 0; i < dressers.Length; i++) houses[dressersH[i]].AddItem(dressersF[i], dressers[i]);
      for (int i = 0; i < tables.Length; i++) houses[tablesH[i]].AddItem(tablesF[i], tables[i]);
    }
  }
}
